// Generated by CoffeeScript 1.9.2
var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

angular.module('starter.controllers', []).controller('NewHomeCtrl', function($scope, Message) {
  var vm;
  vm = $scope.vm = {
    unreadMsg: null
  };

  /*
   * 获取未读消息
   */
  return $scope.fnGetMsgCount = function() {
    return Message.count().then(function(res) {
      return vm.unreadMsg = res;
    });
  };
}).controller('AllotCtrl', function($scope, $state, $stateParams, $ionicPopup, $filter, $ionicLoading, $localStorage, $cordovaGeolocation, $timeout, Order, Account, Message, Map) {
  var vm;
  vm = $scope.vm = {
    list: [],
    pageStart: 1,
    pageCount: 10,
    hasMore: true,
    unreadMsg: null,
    orderType: 2
  };

  /*
  获取任务订单
   */
  $scope.fnGetList = function(status, concat) {
    if (concat == null) {
      concat = false;
    }
    $ionicLoading.show();
    return Order.list({
      status: [status],
      pageStart: 1,
      pageCount: 10
    }).then(function(res) {
      $ionicLoading.hide();
      if (concat === true) {
        vm.list = vm.list.concat(res.rows);
      } else {
        vm.list = res.rows;
      }
      if (res.total < vm.pageCount) {
        return vm.hasMore = false;
      } else {
        return vm.hasMore = true;
      }
    }, function(msg) {
      $ionicLoading.hide();
      vm.hasMore = false;
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    })["finally"](function() {
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
  };

  /*
  获取天气信息
   */
  $scope.fnWeather = function() {
    return Map.ip().then(function(res) {
      vm.city = res.content.address_detail.city;
      return Account.weather(vm.city).then(function(res) {
        var date, substr;
        date = res.today.date;
        substr = date.substr(date.indexOf('实时：'));
        substr = substr.match(/\d+/g)[0];
        res.today.temp = substr;
        return vm.weather = res;
      });
    });
  };

  /*
   * 获取未读消息
   */
  $scope.fnGetMsgCount = function() {
    return Message.count().then(function(res) {
      return vm.unreadMsg = res;
    });
  };
  return $scope.$watch('vm.orderType', function(val) {
    if (angular.isNumber(val)) {
      return $scope.fnGetList(val);
    }
  });
}).controller('CarCtrl', function($scope, $state, $stateParams, $timeout, $filter, $http, $q, Car, Map, $ionicPopup, $localStorage, $ionicLoading, $ionicScrollDelegate) {
  var _CarMap, _lastInfoWindow, _markerClusterer, vm;
  vm = $scope.vm = {
    list: [],
    pageStart: 1,
    pageCount: 10,
    search: '',
    hasMore: true,
    order: $localStorage[$stateParams.oid],
    startTime: $stateParams.startTime,
    endTime: $stateParams.endTime,
    mapView: $stateParams.type === 'map',
    selectedCar: null
  };
  _CarMap = null;
  _markerClusterer = null;
  _lastInfoWindow = null;

  /*
  获取车辆列表
   */
  $scope.fnGetCarList = function(concat, all) {
    var data, defer;
    if (concat == null) {
      concat = false;
    }
    if (all == null) {
      all = false;
    }
    defer = $q.defer();
    $ionicLoading.show();
    if (concat === false) {
      vm.pageStart = 1;
    }
    if (all) {
      data = {
        pageCount: 999999,
        pageStart: 1
      };
    } else {
      data = {
        pageCount: vm.pageCount,
        pageStart: concat === true ? ++vm.pageStart : vm.pageStart,
        matchLic: vm.search,
        matchNick: vm.search
      };
    }
    Car.list(data).then(function(res) {
      defer.resolve();
      $ionicLoading.hide();
      if (concat === true) {
        vm.list = vm.list.concat(res.rows);
      } else {
        vm.list = res.rows;
      }
      if (res.total < vm.pageCount) {
        vm.hasMore = false;
      } else {
        vm.hasMore = true;
      }
      if (vm.mapView) {
        return $scope.fnRefreshMarker(vm.list);
      }
    }, function(msg) {
      defer.resolve();
      $ionicLoading.hide();
      vm.hasMore = false;
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    })["finally"](function() {
      defer.resolve();
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
    return defer.promise;
  };

  /*
  改变视图
   */
  $scope.fnChangeView = function() {
    return vm.mapView = !vm.mapView;
  };

  /*
  初始化地图
   */
  $scope.fnInitMap = function() {
    return $scope.fnGetCarList(false, true).then(function() {
      _CarMap = new BMap.Map('carMap', {
        enableMapClick: false
      });
      _CarMap.centerAndZoom('合肥', 12);
      _CarMap.addControl(new BMap.NavigationControl({
        anchor: BMAP_ANCHOR_TOP_RIGHT,
        type: BMAP_NAVIGATION_CONTROL_ZOOM
      }));
      _CarMap.addControl(new BMap.ScaleControl({
        anchor: BMAP_ANCHOR_BOTTOM_LEFT
      }));
      return $timeout(function() {
        return $scope.fnRefreshMarker(vm.list);
      }, 1000);
    });
  };

  /*
  刷新地图点
   */
  $scope.fnRefreshMarker = function(list) {
    var item, marker, markers, points;
    if (list.length > 0 && (_CarMap != null)) {
      markers = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = list.length; j < len; j++) {
          item = list[j];
          if ((item.location != null) && item.location.lo) {
            results.push($scope.fnCreateMarker(item));
          }
        }
        return results;
      })();
      points = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = markers.length; j < len; j++) {
          marker = markers[j];
          results.push(marker.getPosition());
        }
        return results;
      })();
      _CarMap.setViewport(points);
      _CarMap.clearOverlays();
      return _markerClusterer = new BMapLib.MarkerClusterer(_CarMap, {
        markers: markers
      });
    } else {
      return $timeout(function() {
        return $scope.fnRefreshMarker(vm.list);
      }, 1000);
    }
  };

  /*
  创建标注点
   */
  $scope.fnCreateMarker = function(data) {
    var icon, location, marker, point, status;
    location = data.location || {};
    status = location.status || 0;
    point = new BMap.Point(location.lo, location.la);
    icon = new BMap.Icon('img/car' + status + '.png', new BMap.Size(18, 38));
    marker = new BMap.Marker(point, {
      icon: icon,
      rotation: location.dir || parseInt(Math.random() * 360)
    });
    marker.vehicleUid = data.vehicleUid;
    marker.addEventListener('click', function() {
      var height, id, offset, width;
      _CarMap.removeEventListener('movestart', $scope.fnCloseInfoBox);
      height = 195;
      width = 256;
      offset = {
        top: window.innerHeight / 2 - height - 50,
        left: (window.innerWidth - width) / 2
      };
      $('.custom-info-box').css(offset);
      $('#carInfoBox').show();
      _CarMap.panTo(marker.getPosition(), {
        noAnimation: true
      });
      $timeout(function() {
        return _CarMap.addEventListener('movestart', $scope.fnCloseInfoBox);
      });
      id = this.vehicleUid;
      return $scope.$apply(function() {
        return $scope.fnSelectCar(id);
      });
    });
    return marker;
  };
  $scope.fnCloseInfoBox = function() {
    $('#carInfoBox').hide();
    _CarMap.removeEventListener('movestart', $scope.fnCloseInfoBox);
    return $timeout(function() {
      return delete vm.selectedCar;
    });
  };

  /*
  展示信息窗口
   */
  $scope.fnOpenInfoBox = function(marker, content) {
    var data, dom, infoBoxConfig;
    if (content == null) {
      content = '';
    }
    dom = $('<div>').html(content);
    dom.children('.info').attr('id', marker.vehicleUid);
    data = $filter('filter')(vm.list, {
      vehicleUid: marker.vehicleUid
    })[0];
    dom.find('[data-driverName]').text(data.driverName);
    dom.find('[data-driverPhone]').text(data.driverPhone).attr('src', 'tel:' + data.driverPhone);
    dom.find('[data-vehicleLic]').text(data.vehicleLic);
    dom.find('[data-buShortName]').text(data.buShortName);
    dom.find('[data-updateTime]').text($filter('date')(data.location.updateTime, 'yyyy-MM-dd HH:mm:ss'));
    Map.geoCoder([data.location.la, data.location.lo]).then(function(res) {
      return $('#' + marker.vehicleUid + ' [data-address]').text(res.sematic_description);
    });
    infoBoxConfig = {
      offset: new BMap.Size(0, 20),
      boxClass: 'custom-info-box',
      closeIconUrl: 'img/close(1).png',
      align: INFOBOX_AT_TOP
    };
    _lastInfoWindow = infoWindow;
    return infoWindow.open(marker);
  };

  /*
  选择车辆
   */
  $scope.fnSelectCar = function(id) {
    vm.selectedCar = $filter('filter')(vm.list, {
      vehicleUid: id
    })[0];
    if (vm.selectedCar != null) {
      return Map.geoCoder([vm.selectedCar.location.la, vm.selectedCar.location.lo]).then(function(res) {
        if (vm.selectedCar != null) {
          return vm.selectedCar.address = res.sematic_description;
        }
      });
    }
  };
  return $scope.$watch('vm.mapView', function(val) {
    return $ionicScrollDelegate.freezeAllScrolls(val);
  });
}).controller('DriverCtrl', function($scope, $state, $stateParams, Driver, $ionicPopup, $localStorage, $ionicLoading) {
  var vm;
  vm = $scope.vm = {
    list: [],
    pageStart: 1,
    pageCount: 15,
    search: '',
    hasMore: true,
    id: $stateParams.id
  };
  $scope.fnGetList = function(concat) {
    var data;
    if (concat == null) {
      concat = false;
    }
    $ionicLoading.show();
    if (concat === false) {
      vm.pageStart = 1;
    }
    data = {
      pageCount: vm.pageCount,
      pageStart: concat === true ? ++vm.pageStart : vm.pageStart,
      matchName: vm.search,
      matchStaffCode: vm.search
    };
    return Driver.list(data).then(function(res) {
      $ionicLoading.hide();
      if (concat === true) {
        vm.list = vm.list.concat(res.rows);
      } else {
        vm.list = res.rows;
      }
      if (res.total < vm.pageCount) {
        return vm.hasMore = false;
      } else {
        return vm.hasMore = true;
      }
    }, function(msg) {
      $ionicLoading.hide();
      vm.hasMore = false;
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    })["finally"](function() {
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
  };
  return $scope.fnDetail = function(id) {
    $ionicLoading.show();
    return Driver.detail(id).then(function(res) {
      $ionicLoading.hide();
      return vm.driver = res;
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
}).controller('AccountCtrl', function($scope, $state, $stateParams, $ionicLoading, $ionicPopup, $localStorage, $cordovaGeolocation, Account, Message, KEY_COMPANY, KEY_TOKEN, KEY_USERNAME, KEY_PASSWORD, KEY_ACCOUNT, CLIENT_TYPE) {
  var vm;
  vm = $scope.vm = {
    username: $localStorage[KEY_USERNAME],
    password: $localStorage[KEY_PASSWORD],
    companyInfo: $localStorage[KEY_COMPANY],
    account: $localStorage[KEY_ACCOUNT],
    reminderList: [],
    msg: null,
    tabs: [
      {
        id: 1,
        name: '异常用车处理'
      }, {
        id: 2,
        name: '故障维修处理'
      }, {
        id: 3,
        name: '保险年检处理'
      }
    ],
    list: [],
    pageStart: 1,
    pageCount: 10,
    currentTab: parseInt($stateParams.type) || 1,
    newHome: $localStorage['newHome']
  };
  $scope.fnSetCompanyCode = function(code) {
    $ionicLoading.show({
      template: '正在设置,请稍后'
    });
    return Account.getCompany(code).then(function(data) {
      $ionicLoading.hide();
      $localStorage[KEY_COMPANY] = data;
      return $state.go('login');
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnLogin = function(username, password) {
    vm.companyInfo = $localStorage[KEY_COMPANY];
    if (!username || !password) {
      $ionicPopup.alert({
        title: '请填写用户名和密码'
      });
      return;
    }
    $ionicLoading.show({
      template: '正在登录...',
      hideOnStateChange: true
    });
    return Account.login(username + '@' + vm.companyInfo.orgCode, password).then(function() {
      return Account.userInfo();
    }).then(function(res) {
      $ionicLoading.hide();
      $localStorage[KEY_USERNAME] = username;
      $localStorage[KEY_PASSWORD] = password;
      if (window.cordova && window.cordova.plugins && window.cordova.plugins.XGPlugin) {
        cordova.plugins.XGPlugin.register(function(res) {
          return console.log(res);
        }, function(err) {
          return console.log(err);
        }, username + '@' + vm.companyInfo.orgCode);
      }
      vm.userInfo = res;
      if (Account.permission('vehicle_manager')) {
        $scope.$emit('message.open');
        return $state.go('newHome');
      } else if (Account.permission('driver')) {
        $scope.$emit('message.open');
        return $state.go('mission');
      } else {
        return $state.go('userHome');
      }
    }, function(msg) {
      delete $localStorage[KEY_TOKEN];
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnLogout = function() {
    $scope.$emit('message.close');
    return Account.logout().then(function() {
      if (window.cordova && window.cordova.plugins && window.cordova.plugins.XGPlugin) {
        cordova.plugins.XGPlugin.unregister();
      }
      return $state.go('login');
    });
  };
  $scope.fnGetReminderList = function() {
    return Account.reminderList().then(function(res) {
      return vm.reminderList = res.rows;
    }, function(msg) {
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnUpdateReminder = function(item) {
    return Account.updateReminder(item)["catch"](function() {
      $ionicPopup.alert({
        title: '请检查你的网络'
      });
      return item.checked = !item.checked;
    });
  };
  $scope.fnSettingNewHome = function(status) {
    console.log(status);
    return $localStorage['newHome'] = status;
  };
  $scope.fnMofidyPwd = function(oldPwd, newPwd, confirmPwd) {
    var data;
    if (newPwd === confirmPwd) {
      data = {
        oldPassword: oldPwd,
        password: newPwd
      };
      return Account.modifyPwd(data).then(function() {
        return $ionicPopup.alert({
          title: '密码已修改'
        });
      }, function(msg) {
        if (msg == null) {
          return;
        }
        return $ionicPopup.alert({
          title: msg
        });
      });
    } else {
      return $ionicPopup.alert({
        title: '两次密码输入不一致'
      });
    }
  };
  $scope.fnGetPermission = function(role) {
    return Account.permission(role);
  };

  /*
   * 获取消息列表
   */
  $scope.fnGetMsgList = function(tab, concat) {
    var data;
    if (concat == null) {
      concat = false;
    }
    if (tab != null) {
      vm.currentTab = tab;
    }
    if (concat === false) {
      vm.pageStart = 1;
      vm.list = [];
    }
    data = {
      messageType: tab,
      pageCount: vm.pageCount,
      pageStart: concat === true ? ++vm.pageStart : vm.pageStart
    };
    $ionicLoading.show();
    return Message.list(data).then(function(res) {
      $ionicLoading.hide();
      if (concat === true) {
        vm.list = vm.list.concat(res.rows);
      } else {
        vm.list = res.rows;
      }
      if (res.total < vm.pageCount) {
        return vm.hasMore = false;
      } else {
        return vm.hasMore = true;
      }
    }, function(msg) {
      $ionicLoading.hide();
      vm.hasMore = false;
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    })["finally"](function() {
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
  };

  /*
   * 获取消息详情
   */
  return $scope.fnDetail = function() {
    return Message.detail($stateParams.messageUid).then(function(res) {
      return vm.msg = res;
    });
  };
}).controller('AllotDetailCtrl', function($scope, $state, $stateParams, $ionicLoading, $ionicPopup, $localStorage, $ionicModal, $ionicHistory, Order, Car, Driver, Account, KEY_ACCOUNT) {
  var vm;
  vm = $scope.vm = {
    id: $stateParams.id,
    nextId: '',
    list: [],
    pageStart: 1,
    pageCount: 10,
    search: '',
    orderList: [],
    order: {},
    subOrder: $localStorage[$stateParams.oid],
    account: $localStorage[KEY_ACCOUNT],
    tabs: [
      {
        id: 1,
        name: '审批中'
      }, {
        id: 2,
        name: '已配车'
      }, {
        id: 3,
        name: '在途'
      }, {
        id: 4,
        name: '历史'
      }
    ],
    currentTab: $stateParams.id,
    startTime: $stateParams.startTime,
    endTime: $stateParams.endTime,
    location: null,
    retryTime: 3
  };

  /*
  获取地理位置
   */
  $scope.fnGetLocation = function() {
    if (!vm.location) {
      return Account.getLocation().then(function(res) {
        return vm.location = res;
      }, function(err) {
        if (vm.retryTime > 0) {
          vm.retryTime--;
          return $scope.fnGetLocation();
        }
      });
    }
  };
  $scope.fnGetDistance = function(location) {
    var distance;
    if ((vm.location != null) && (location != null)) {
      distance = Account.getDistance(vm.location.lat, vm.location.lng, parseInt(location.la), parseInt(location.lo));
      if (distance != null) {
        return distance + 'km';
      }
    }
  };

  /*
  获取订单列表
   */
  $scope.fnGetOrderList = function() {
    return Order.list({
      status: [2]
    }).then(function(res) {
      vm.orderList = res.rows;
      return vm.nextId = $scope.fnGetNextId(res.rows);
    }, function(msg) {
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };

  /*
  获取下个订单号
   */
  $scope.fnGetNextId = function(list) {
    var i, j, len, order;
    for (i = j = 0, len = list.length; j < len; i = ++j) {
      order = list[i];
      if (order.serialNum === vm.id) {
        if (vm.orderList[i + 1] != null) {
          return vm.orderList[i + 1].serialNum;
        } else {
          return;
        }
      }
    }
  };

  /*
  获取订单详情
   */
  $scope.fnDetail = function() {
    $ionicLoading.show();
    return Order.detail(vm.id).then(function(data) {
      $scope.fnRefreshCarList(data.driverAndVehicle);
      vm.order = data;
      return $ionicLoading.hide();
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };

  /*
  提交并处理下一条
   */
  $scope.fnCommit = function(next) {
    var j, len, order, ref;
    ref = vm.order.driverAndVehicle;
    for (j = 0, len = ref.length; j < len; j++) {
      order = ref[j];
      if (!order.vehicleUid || !order.userUid) {
        $ionicPopup.alert({
          title: '请先分配车辆和驾驶员'
        });
        return;
      }
    }
    $ionicLoading.show();
    return Order.issue(vm.id, vm.order.driverAndVehicle).then(function() {
      $ionicLoading.hide();
      if (vm.nextId && next) {
        return $scope.fnChangeTab(vm.nextId);
      } else {
        return $state.go('allot');
      }
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };

  /*
  切换tab
   */
  $scope.fnChangeTab = function(id) {
    return $state.go('allotDetail', {
      id: id
    });
  };

  /*
  进入车辆挑选列表
   */
  $scope.fnGotoCarList = function(list) {
    var j, len, order, results;
    results = [];
    for (j = 0, len = list.length; j < len; j++) {
      order = list[j];
      if (!order.vehicleUid) {
        $localStorage[order.orderUid] = angular.extend(order, {
          serialNum: vm.id
        });
        $state.go('cars', {
          oid: order.orderUid,
          startTime: vm.order.planStartTime,
          endTime: vm.order.planEndTime
        });
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  /*
  获取车辆列表
   */
  $scope.fnGetCarList = function(concat) {
    var data;
    if (concat == null) {
      concat = false;
    }
    $ionicLoading.show();
    if (concat === false) {
      vm.pageStart = 1;
    }
    data = {
      pageCount: vm.pageCount,
      pageStart: concat === true ? ++vm.pageStart : vm.pageStart,
      status: 5,
      startTime: vm.startTime + ':00',
      endTime: vm.endTime + ':00',
      matchLic: vm.search,
      matchNick: vm.search
    };
    return Car.list(data).then(function(res) {
      $ionicLoading.hide();
      if (concat === true) {
        vm.list = vm.list.concat(res.rows);
      } else {
        vm.list = res.rows;
      }
      if (res.total < vm.pageCount) {
        return vm.hasMore = false;
      } else {
        return vm.hasMore = true;
      }
    }, function(msg) {
      $ionicLoading.hide();
      vm.hasMore = false;
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    })["finally"](function() {
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
  };

  /*
  选择车辆
   */
  $scope.fnSelectCar = function(car) {
    angular.extend($localStorage[$stateParams.oid], car);
    return $state.go('drivers', {
      oid: $stateParams.oid,
      startTime: vm.startTime,
      endTime: vm.endTime
    });
  };

  /*
  检查是否还有未分配订单
   */
  $scope.fnCheckEmptyOrder = function() {
    var j, len, order, ref;
    if (vm.order.driverAndVehicle == null) {
      return false;
    }
    ref = vm.order.driverAndVehicle;
    for (j = 0, len = ref.length; j < len; j++) {
      order = ref[j];
      if (!order.vehicleUid || !order.userUid) {
        return true;
      }
    }
  };

  /*
  清除订单信息
   */
  $scope.fnClearOrder = function(order, event) {
    delete order.vehicleUid;
    return event.stopPropagation();
  };

  /*
  进入驾驶员列表
   */
  $scope.fnGotoDriverList = function(order) {
    $localStorage[order.orderUid] = angular.extend(order, {
      serialNum: vm.id
    });
    return $state.go('drivers', {
      oid: order.orderUid,
      startTime: vm.order.planStartTime,
      endTime: vm.order.planEndTime
    });
  };
  $scope.fnGetDriverList = function(concat) {
    var data;
    if (concat == null) {
      concat = false;
    }
    $ionicLoading.show();
    if (concat === false) {
      vm.pageStart = 1;
    }
    data = {
      pageCount: vm.pageCount,
      pageStart: concat === true ? ++vm.pageStart : vm.pageStart,
      status: 1,
      startTime: vm.startTime + ':00',
      endTime: vm.endTime + ':00',
      matchName: vm.search,
      matchStaffId: vm.search
    };
    return Driver.list(data).then(function(res) {
      $ionicLoading.hide();
      if (concat === true) {
        vm.list = vm.list.concat(res.rows);
      } else {
        vm.list = res.rows;
      }
      if (res.total < vm.pageCount) {
        return vm.hasMore = false;
      } else {
        return vm.hasMore = true;
      }
    }, function(msg) {
      $ionicLoading.hide();
      vm.hasMore = false;
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    })["finally"](function() {
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
  };

  /*
  选择驾驶员
   */
  $scope.fnSelectDriver = function(driver) {
    if ($localStorage[$stateParams.oid] != null) {
      angular.extend($localStorage[$stateParams.oid], driver);
    } else {
      $localStorage[$stateParams.oid] = driver;
    }
    return $state.go('allotDetail', {
      id: vm.subOrder.serialNum
    });
  };

  /*
  刷新分配车辆信息
   */
  return $scope.fnRefreshCarList = function(list) {
    var j, len, order, results;
    results = [];
    for (j = 0, len = list.length; j < len; j++) {
      order = list[j];
      results.push(angular.extend(order, $localStorage[order.orderUid]));
    }
    return results;
  };
}).controller('CarInfoCtrl', function($scope, $state, $stateParams, $timeout, $filter, $interval, $ionicLoading, $ionicPopup, $cordovaDatePicker, $ionicScrollDelegate, $localStorage, $ionicModal, Car, Map) {
  var _carMarker, _gauge, _parkMap, _traceMap, vm;
  vm = $scope.vm = {
    id: $stateParams.id,
    tabList: ['车辆档案', '行车记录', '车辆跟踪', '车辆状况', '停车分布'],
    info: {},
    journals: {},
    today: new Date(),
    beginTime: new Date(),
    endTime: new Date(),
    currentLocation: {}
  };
  $scope.today = new Date();
  _traceMap = null;
  _carMarker = null;
  _parkMap = null;
  _gauge = null;
  if (ionic.Platform.isIOS()) {
    $timeout(function() {
      return $('.car-info-content').offset(function(index, coords) {
        var temp;
        temp = {
          top: coords.top + 20,
          left: coords.left
        };
        return temp;
      });
    }, 800);
  }
  $scope.fnInitTab = function() {
    if ($stateParams.type != null) {
      return vm.tab = vm.tabList[$stateParams.type - 1];
    } else {
      return vm.tab = vm.tabList[0];
    }
  };
  $scope.fnOpenPicker = function() {
    return vm.todayInstance.show();
  };
  $scope.fnGetCarDetail = function() {
    return Car.detail(vm.id).then(function(res) {
      vm.info = res;
      return vm.currentLocation = res.location || {};
    }, function(msg) {
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnToggleLocationTimer = function(flag) {
    if (flag == null) {
      flag = false;
    }
    $interval.cancel(vm.locationTimer);
    if (flag === true) {
      return vm.locationTimer = $interval(function() {
        return Car.location(vm.id).then(function(res) {
          vm.currentLocation = res;
          if (vm.tab === '车辆跟踪') {
            $scope.fnRefreshMarker(vm.currentLocation);
          }
          if (vm.tab === '车辆状况') {
            $scope.fnRefreshDashboard(vm.currentLocation);
          }
          if (vm.tab === '停车分布') {
            return $scope.fnInitPark(vm.currentLocation);
          }
        });
      }, 30000);
    }
  };
  $scope.fnRefreshMarker = function(location) {
    var icon, point;
    point = new BMap.Point(location.lo, location.la);
    if (!_carMarker) {
      _carMarker = new BMap.Marker(point);
      _traceMap.addOverlay(_carMarker);
      _traceMap.setViewport([point]);
    }
    _carMarker.setPosition(point);
    icon = new BMap.Icon('img/car' + (location.status || 0) + '.png', new BMap.Size(18, 38));
    _carMarker.setIcon(icon);
    _carMarker.setRotation(location.dir || parseInt(Math.random() * 360));
    return _traceMap.panTo(point);
  };
  $scope.fnRefreshDashboard = function(location) {
    var option, rpmOption, speedOption, voltageOption, waterOption;
    speedOption = {
      name: '时速',
      type: 'gauge',
      z: 3,
      min: 0,
      max: 240,
      splitNumber: 6,
      axisLine: {
        lineStyle: {
          color: [[0.2, '#1bb2d8'], [0.8, '#1790cf'], [1, '#1c7099']],
          width: 6
        }
      },
      axisTick: {
        splitNumber: 10,
        lenth: 14,
        lineStyle: {
          color: 'auto'
        }
      },
      splitLine: {
        length: 20,
        lineStyle: {
          color: 'auto'
        }
      },
      pointer: {
        length: '90%',
        color: 'auto'
      },
      title: {
        offsetCenter: [0, '84%'],
        textStyle: {
          color: '#333',
          fontWeight: 'bolder',
          fontSize: 12,
          fontStyle: 'italic'
        }
      },
      detail: {
        textStyle: {
          fontWeight: 'bloder',
          color: 'auto'
        }
      },
      data: [
        {
          value: parseFloat(location.speed || 0),
          name: 'km/h'
        }
      ]
    };
    rpmOption = {
      name: '转速',
      type: 'gauge',
      center: ['16%', '55%'],
      radius: ['50%', '50%'],
      min: 0,
      max: 8,
      endAngle: 45,
      splitNumber: 4,
      axisLine: {
        lineStyle: {
          color: [[0.2, '#1bb2d8'], [0.8, '#1790cf'], [1, '#1c7099']],
          width: 6
        }
      },
      axisTick: {
        splitNumber: 10,
        lenth: 12,
        lineStyle: {
          color: 'auto'
        }
      },
      splitLine: {
        length: 18,
        lineStyle: {
          color: 'auto'
        }
      },
      pointer: {
        width: 5
      },
      title: {
        offsetCenter: [0, '100%'],
        textStyle: {
          color: '#333',
          fontWeight: 'bolder',
          fontSize: 12,
          fontStyle: 'italic'
        }
      },
      detail: {
        offsetCenter: [0, '20%'],
        textStyle: {
          fontWeight: 'bloder',
          color: 'auto'
        }
      },
      data: [
        {
          value: parseFloat(location.rpm || 0) * 0.001,
          name: 'x1000 r/min'
        }
      ]
    };
    voltageOption = {
      name: '电压',
      type: 'gauge',
      center: ['84%', '50%'],
      radius: '50%',
      min: 0,
      max: 36,
      startAngle: 135,
      endAngle: 45,
      splitNumber: 2,
      axisLine: {
        lineStyle: {
          color: [[0.2, '#ff4500'], [0.8, '#48b'], [1, '#228b22']],
          width: 8
        }
      },
      axisTick: {
        splitNumber: 9,
        lenth: 10,
        lineStyle: {
          color: 'auto'
        }
      },
      axisLabel: {
        formatter: function(v) {
          switch (v) {
            case 9:
              return 'L';
            case 18:
              return '电压';
            case 36:
              return 'H';
          }
        }
      },
      splitLine: {
        length: 15,
        lineStyle: {
          color: 'auto'
        }
      },
      pointer: {
        width: 2
      },
      title: {
        show: false
      },
      detail: {
        show: false
      },
      data: [
        {
          value: parseFloat(location.voltage || 0)
        }
      ]
    };
    waterOption = {
      name: '水温',
      type: 'gauge',
      center: ['84%', '60%'],
      radius: '50%',
      min: -40,
      max: 200,
      startAngle: 315,
      endAngle: 225,
      splitNumber: 2,
      axisLine: {
        lineStyle: {
          color: [[0.2, '#ff4500'], [0.8, '#48b'], [1, '#228b22']],
          width: 8
        }
      },
      axisTick: {
        splitNumber: 9,
        lenth: 10,
        lineStyle: {
          color: 'auto'
        }
      },
      axisLabel: {
        formatter: function(v) {
          console.log(v, '电压');
          switch (v) {
            case -40:
              return 'L';
            case 80:
              return '水温';
            case 200:
              return 'H';
          }
        }
      },
      splitLine: {
        length: 15,
        lineStyle: {
          color: 'auto'
        }
      },
      pointer: {
        width: 2
      },
      title: {
        show: false
      },
      detail: {
        show: false
      },
      data: [
        {
          value: parseFloat(location.waterDegree || 0)
        }
      ]
    };
    option = {
      series: [speedOption, rpmOption, voltageOption, waterOption]
    };
    return $timeout(function() {
      if (!_gauge) {
        _gauge = echarts.init(document.getElementById('gauge'), 'blue');
      }
      _gauge.setOption(option);
      return _gauge.refresh();
    }, 500);
  };
  $scope.fnInitTrace = function() {
    return $timeout(function() {
      _traceMap = new BMap.Map('traceMap');
      _traceMap.centerAndZoom('合肥', 10);
      _traceMap.addControl(new BMap.NavigationControl({
        anchor: BMAP_ANCHOR_BOTTOM_RIGHT,
        type: BMAP_NAVIGATION_CONTROL_ZOOM
      }));
      _traceMap.addControl(new BMap.ScaleControl({
        anchor: BMAP_ANCHOR_BOTTOM_LEFT
      }));
      return $timeout(function() {
        if (vm.currentLocation != null) {
          return $scope.fnRefreshMarker(vm.currentLocation);
        }
      }, 2000);
    }, 500);
  };
  $scope.fnInitPark = function() {
    var currentPoint, item, j, len, marker, points, ref, results;
    if (!_parkMap) {
      _parkMap = new BMap.Map('parkMap');
      _parkMap.centerAndZoom('合肥', 10);
      _parkMap.addControl(new BMap.NavigationControl({
        anchor: BMAP_ANCHOR_BOTTOM_RIGHT,
        type: BMAP_NAVIGATION_CONTROL_ZOOM
      }));
      _parkMap.addControl(new BMap.ScaleControl({
        anchor: BMAP_ANCHOR_BOTTOM_LEFT
      }));
    } else {
      _parkMap.clearOverlays();
    }
    points = (function() {
      var j, len, ref, results;
      ref = vm.parks;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        results.push(item.point);
      }
      return results;
    })();
    if ((vm.currentLocation.lo != null) && (vm.currentLocation.la != null)) {
      currentPoint = new BMap.Point(vm.currentLocation.lo, vm.currentLocation.la);
      marker = new BMap.Marker(currentPoint, {
        icon: new BMap.Icon('img/car3.png', new BMap.Size(18, 38)),
        rotation: vm.currentLocation.dir || parseInt(Math.random() * 360)
      });
      points.push(currentPoint);
      _parkMap.addOverlay(marker);
    }
    _parkMap.setViewport(points);
    ref = vm.parks;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      results.push(_parkMap.addOverlay($scope.fnCreateLabelMarker(item.point)));
    }
    return results;
  };
  $scope.fnCreateLabelMarker = function(point) {
    var geoc, marker;
    marker = new BMap.Marker(point);
    geoc = new BMap.Geocoder();
    geoc.getLocation(point, function(rs) {
      var addComp, bArr, business, label, pois, text;
      pois = rs.surroundingPois;
      business = rs.business;
      if ((pois != null) && pois.length > 0) {
        text = pois[0].title;
      } else if (business) {
        bArr = business.split(',');
        text = bArr[0];
      } else {
        addComp = rs.addressComponents;
        text = addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber;
      }
      label = new BMap.Label(text, {
        offset: new BMap.Size(20, -10)
      });
      return marker.setLabel(label);
    });
    return marker;
  };
  $scope.fnGetPark = function() {
    var getPoint;
    $timeout(function() {
      return $scope.fnInitPark();
    }, 500);
    getPoint = function(item) {
      item.point = new BMap.Point(item.lo, item.la);
      return item;
    };
    return Car.park(vm.id).then(function(res) {
      var item;
      vm.parks = (function() {
        var j, len, ref, results;
        ref = res.rows;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          results.push(getPoint(item));
        }
        return results;
      })();
      return $scope.fnInitPark();
    }, function(msg) {
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnGetJournals = function() {
    var data;
    data = {
      day: $filter('date')(vm.today, 'yyyy-MM-dd')
    };
    return Car.journals(vm.id, data).then(function(res) {
      vm.journals = res.rows;
      return $scope.fnGeoCoder(vm.journals);
    }, function(msg) {
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnGeoCoder = function(list) {
    return angular.forEach(list, function(item) {
      Map.geoCoder([item.startLoc.locLa, item.startLoc.locLo]).then(function(res) {
        return angular.extend(item.startLoc, res);
      });
      return Map.geoCoder([item.endLoc.locLa, item.endLoc.locLo]).then(function(res) {
        return angular.extend(item.endLoc, res);
      });
    });
  };
  $scope.fnDateLenth = function(time) {
    var date3, days, hours, leave1, leave2, minutes;
    date3 = parseInt(time * 1000);
    days = Math.floor(date3 / (24 * 3600 * 1000));
    leave1 = date3 % (24 * 3600 * 1000);
    hours = Math.floor(leave1 / (3600 * 1000));
    leave2 = leave1 % (3600 * 1000);
    minutes = Math.floor(leave2 / (60 * 1000));
    if (days > 0) {
      return days + '天' + hours + '小时';
    } else if (hours > 0) {
      return hours + '小时' + minutes + '分钟';
    } else {
      return minutes + '分钟';
    }
  };
  $scope.fnGetFuel = function() {
    var item, j, len, ref, result;
    result = 0;
    ref = vm.journals;
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      result += parseFloat(item.fuel);
    }
    return result;
  };
  $scope.fnGetMile = function() {
    var item, j, len, ref, result;
    result = 0;
    ref = vm.journals;
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      result += parseFloat(item.miles);
    }
    return result / 1000;
  };
  $scope.fnGetAvgFuel = function() {
    var fuel, item, j, len, mile, ref;
    fuel = 0;
    mile = 0;
    ref = vm.journals;
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      fuel += parseFloat(item.fuel);
      mile += parseFloat(item.miles);
    }
    return (fuel / mile) * 100;
  };
  $scope.fnOtherDay = function(date, day) {
    var d;
    d = new Date(date.valueOf());
    d.setDate(d.getDate() + day);
    vm.todayInstance.setVal(vm.today, false, false, true);
    return d;
  };
  $scope.fnSetDay = function(date, day) {
    if (day > 0) {
      if (($scope.today.valueOf() - date.valueOf()) < 1 * 24 * 60 * 60 * 1000) {
        return;
      }
    }
    return vm.today.setDate(date.getDate() + day);
  };
  $scope.fnCanNextDay = function() {
    if (($scope.today.valueOf() - vm.today.valueOf()) > 1 * 24 * 60 * 60 * 1000) {

    }
  };
  $scope.$watch('vm.today', function() {
    if (vm.tab === '行车记录') {
      return $scope.fnGetJournals();
    }
  }, true);
  return $scope.$watch('vm.tab', function(val) {
    $ionicScrollDelegate.freezeAllScrolls(false);
    $scope.fnToggleLocationTimer(false);
    switch (val) {
      case '车辆跟踪':
        vm.mapView = true;
        $scope.fnInitTrace();
        $scope.fnToggleLocationTimer(true);
        return $ionicScrollDelegate.freezeAllScrolls(true);
      case '车辆状况':
        $scope.fnRefreshDashboard(vm.currentLocation);
        $scope.fnToggleLocationTimer(true);
        return $ionicScrollDelegate.freezeAllScrolls(true);
      case '行车记录':
        return $scope.fnGetJournals();
      case '停车分布':
        vm.mapView = true;
        $scope.fnGetPark();
        $scope.fnToggleLocationTimer(true);
        return $ionicScrollDelegate.freezeAllScrolls(true);
    }
  });
}).controller('AreaCtrl', function($scope, $state, $stateParams, $timeout, $filter, $ionicActionSheet, $ionicHistory, $ionicLoading, $ionicPopup, $localStorage, Area, Car) {
  var _areaMap, vm;
  vm = $scope.vm = {
    list: [],
    carList: [],
    id: $stateParams.id,
    formData: {
      type: 0,
      points: [],
      trigger: 0,
      startTime: new Date(),
      endTime: new Date(),
      vehicles: []
    }
  };
  _areaMap = null;
  $scope.fnOpenPicker = function(attr) {
    $cordovaDatePicker.show({
      mode: 'time',
      date: vm.formData[attr],
      doneButtonLabel: '确定',
      cancelButtonLabel: '取消'
    }).then(function(date) {
      if (date != null) {
        return vm.formData[attr] = date;
      }
    });
  };
  $scope.fnGetList = function() {
    $ionicLoading.show();
    return Area.list().then(function(res) {
      $ionicLoading.hide();
      return vm.list = res.rows;
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnGetCarList = function() {
    $ionicLoading.show();
    return Car.list({
      pageCount: 20000
    }).then(function(res) {
      var item, j, len, ref, ref1, results;
      $ionicLoading.hide();
      vm.carList = res.rows;
      ref = vm.carList;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if ((ref1 = item.vehicleUid, indexOf.call($localStorage['AREA_CARS'], ref1) >= 0)) {
          results.push(item.checked = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnSaveCheckCar = function() {
    var item, selectedCar;
    selectedCar = $filter('filter')(vm.carList, {
      checked: true
    });
    $localStorage['AREA_CARS'] = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = selectedCar.length; j < len; j++) {
        item = selectedCar[j];
        results.push(item.vehicleUid);
      }
      return results;
    })();
    return $ionicHistory.goBack(-1);
  };
  $scope.fnDetail = function() {
    if (vm.id != null) {
      return Area.detail(vm.id).then(function(res) {
        angular.extend(vm.formData, res);
        return $localStorage['points_' + res.areaUid] = {
          type: res.type,
          radius: res.radius,
          points: res.points
        };
      }, function(msg) {
        if (msg == null) {
          return;
        }
        return $ionicPopup.alert({
          title: msg
        });
      });
    }
  };
  $scope.fnShowSheet = function(item) {
    var hideSheet;
    return hideSheet = $ionicActionSheet.show({
      buttons: [
        {
          text: '查看详情'
        }, {
          text: '开启'
        }, {
          text: '关闭'
        }
      ],
      cancelText: '取消',
      buttonClicked: function(index) {
        switch (index) {
          case 0:
            $state.go('areaDetail', {
              id: item.areaUid
            });
            break;
          case 1:
            console.log('开启');
            Area.enable(item.areaUid).then(function() {
              return $scope.fnGetList();
            }, function(msg) {
              return $ionicPopup.alert({
                title: msg
              });
            });
            break;
          case 2:
            console.log('关闭');
            Area.disable(item.areaUid).then(function() {
              return $scope.fnGetList();
            }, function(msg) {
              return $ionicPopup.alert({
                title: msg
              });
            });
        }
        return true;
      },
      destructiveButtonClicked: function() {
        Area.remove(item.areaUid).then(function() {
          return $scope.fnGetList();
        }, function(msg) {
          return $ionicPopup.alert({
            title: msg
          });
        });
        return true;
      }
    });
  };
  $scope.fnInitMap = function() {
    var areaControl;
    _areaMap = new BMap.Map('areaMap');
    _areaMap.centerAndZoom('合肥', 14);
    _areaMap.addControl(new BMap.NavigationControl());
    _areaMap.addControl(new BMap.ScaleControl());
    areaControl = function() {
      var lineWidth, x, y;
      lineWidth = window.innerWidth / 2;
      x = (window.innerWidth - lineWidth) / 2;
      y = (window.innerHeight - lineWidth) / 2;
      this.defaultAnchor = BMAP_ANCHOR_TOP_LEFT;
      this.defaultOffset = new BMap.Size(x, y);
    };
    areaControl.prototype = new BMap.Control();
    areaControl.prototype.initialize = function(map) {
      var div, lineWidth;
      div = document.createElement('div');
      lineWidth = window.innerWidth / 2;
      div.style.width = lineWidth + 'px';
      div.style.height = lineWidth + 'px';
      div.style.border = '2px solid rgb(23,121,253)';
      div.style.backgroundColor = "rgba(0,0,0,.4)";
      map.getContainer().appendChild(div);
      return div;
    };
    if ($stateParams.read) {
      return $scope.fnDrawPoints($localStorage['points_' + vm.id]);
    } else {
      return _areaMap.addControl(new areaControl());
    }
  };
  $scope.fnDrawPoints = function(pointInfo) {
    var circle, point, points, polygon, type;
    type = pointInfo.type;
    points = (function() {
      var j, len, ref, results;
      ref = pointInfo.points;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        point = ref[j];
        results.push(new BMap.Point(point.lo, point.la));
      }
      return results;
    })();
    if (type === 1) {
      circle = new BMap.Circle(points[0], pointInfo.radius, {
        strokeWeight: 2,
        strokeColor: "#ff0000"
      });
      _areaMap.addOverlay(circle);
      $timeout(function() {
        return _areaMap.panTo(points[0]);
      }, 200);
    } else {
      polygon = new BMap.Polygon(points, {
        strokeWeight: 2,
        strokeColor: "#ff0000"
      });
      _areaMap.addOverlay(polygon);
      $timeout(function() {
        return _areaMap.setViewport(points);
      }, 200);
    }
  };
  $scope.fnGetPoints = function() {
    var points;
    points = $localStorage['AREA_POINTS'] || [];
    if (points.length > 0) {
      vm.formData.points = points;
    }
    return points;
  };
  $scope.fnGetSelectedCar = function() {
    var cars;
    cars = $localStorage['AREA_CARS'] || [];
    if (cars.length > 0) {
      vm.formData.vehicles = cars;
    }
    return cars;
  };
  $scope.fnGetBounds = function() {
    var item, lb, lineWidth, lt, pointArray, pointFormat, rb, rt;
    pointArray = [];
    pointFormat = function(point) {
      var data;
      return data = {
        lo: point.lng,
        la: point.lat
      };
    };
    lineWidth = window.innerWidth / 2;
    lt = new BMap.Pixel((window.innerWidth - lineWidth) / 2, (window.innerHeight - lineWidth) / 2);
    pointArray.push(_areaMap.pixelToPoint(lt));
    rt = new BMap.Pixel((window.innerWidth + lineWidth) / 2, (window.innerHeight - lineWidth) / 2);
    pointArray.push(_areaMap.pixelToPoint(rt));
    rb = new BMap.Pixel((window.innerWidth + lineWidth) / 2, (window.innerHeight + lineWidth) / 2);
    pointArray.push(_areaMap.pixelToPoint(rb));
    lb = new BMap.Pixel((window.innerWidth - lineWidth) / 2, (window.innerHeight + lineWidth) / 2);
    pointArray.push(_areaMap.pixelToPoint());
    $localStorage['AREA_POINTS'] = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = pointArray.length; j < len; j++) {
        item = pointArray[j];
        results.push(pointFormat(item));
      }
      return results;
    })();
    return $ionicHistory.goBack(-1);
  };
  return $scope.fnCreate = function() {
    var data;
    $ionicLoading.show();
    data = angular.copy(vm.formData);
    data.startTime = $filter('date')(data.startTime, 'HH:mm');
    data.endTime = $filter('date')(data.endTime, 'HH:mm');
    return Area.create(data).then(function() {
      $ionicLoading.hide();
      return $state.go('areaList');
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
}).controller('MissionCtrl', function($scope, $state, $stateParams, $filter, $ionicLoading, $ionicPopup, $localStorage, $ionicHistory, Order, Account, Car, Map, KEY_ACCOUNT) {
  var vm;
  vm = $scope.vm = {
    current: null,
    list: [],
    isBegin: false,
    taxId: $stateParams.taxId,
    costId: $stateParams.costId,
    account: $localStorage[KEY_ACCOUNT],
    retryTime: 3,
    tax: {
      costTime: new Date()
    }
  };
  $scope.today = new Date();
  $scope.fnConcatPeople = function(list) {
    var _arr, people;
    if (!angular.isArray(list)) {
      return '';
    }
    _arr = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = list.length; j < len; j++) {
        people = list[j];
        results.push(people.name);
      }
      return results;
    })();
    return _arr.join(',');
  };
  $scope.fnGetTaxInfo = function() {
    if (vm.costId != null) {
      return Order.detailTax(vm.costId).then(function(res) {
        return angular.extend(vm.tax, res);
      });
    }
  };

  /*
  拼接车牌号
   */
  $scope.fnConcatVehicleLic = function(list) {
    var vehicle, vehicleLicArray;
    if (angular.isArray(list)) {
      vehicleLicArray = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = list.length; j < len; j++) {
          vehicle = list[j];
          results.push(vehicle.vehicleLic);
        }
        return results;
      })();
      return vehicleLicArray.join(',');
    }
  };

  /*
  获取任务订单
   */
  $scope.fnGetList = function() {
    $ionicLoading.show();
    return Order.list({
      status: [3, 4].join(',')
    }).then(function(res) {
      vm.list = res.rows;
      vm.current = vm.list.shift();
      return $ionicLoading.hide();
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    })["finally"](function() {
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
  };

  /*
  开始发车
   */
  $scope.fnBegining = function(id, event) {
    Order.begin(id).then(function() {
      return vm.current.status = 4;
    }, function(msg) {
      return $ionicPopup.alert({
        title: msg
      });
    });
    return event.stopPropagation();
  };

  /*
  完成任务
   */
  $scope.fnFinish = function(id, event) {
    $ionicPopup.confirm({
      title: '完成任务',
      template: '是否确认完成任务'
    }).then(function(res) {
      if (res) {
        return Order.finish(id).then(function() {
          return $scope.fnGetList();
        }, function(msg) {
          if (msg == null) {
            return;
          }
          return $ionicPopup.alert({
            title: msg
          });
        });
      }
    });
    return event.stopPropagation();
  };

  /*
  查询税费列表
   */
  $scope.fnGetTaxList = function() {
    return Order.taxList(vm.taxId).then(function(res) {
      return vm.taxList = res.rows;
    }, function(msg) {
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };

  /*
  打开税费管理列表
   */
  $scope.fnGotoTaxList = function(id, event) {
    $state.go('tax', {
      taxId: id
    });
    return event.stopPropagation();
  };

  /*
  计算总价格
   */
  $scope.fnTaxCount = function() {
    var cost, j, len, ref, tax;
    if (angular.isArray(vm.taxList)) {
      cost = 0;
      ref = vm.taxList;
      for (j = 0, len = ref.length; j < len; j++) {
        tax = ref[j];
        cost += parseFloat(tax.costAmount);
      }
      return cost;
    } else {
      return 0;
    }
  };

  /*
  税费提交
   */
  $scope.fnAddTax = function(data) {
    data.costTime = $filter('date')(data.costTime, 'yyyy-MM-dd HH:mm:ss');
    data.costAmount = parseFloat(data.costAmount);
    if (vm.costId != null) {
      return Order.modifyTax(vm.costId, data).then(function() {
        return $ionicHistory.goBack(-1);
      }, function(msg) {
        if (msg == null) {
          return;
        }
        return $ionicPopup.alert({
          title: msg
        });
      });
    } else {
      return Order.addTax(vm.taxId, data).then(function() {
        return $ionicHistory.goBack(-1);
      }, function(msg) {
        if (msg == null) {
          return;
        }
        return $ionicPopup.alert({
          title: msg
        });
      });
    }
  };
  $scope.fnGetLocation = function() {
    return Account.getLocation().then(function(res) {
      vm.locLo = res.lng;
      vm.locLa = res.lat;
      return Map.geoCoder([vm.locLa, vm.locLo]).then(function(res) {
        return vm.location = res.sematic_description;
      });
    }, function(err) {
      if (vm.retryTime > 0) {
        vm.retryTime--;
        return $scope.fnGetLocation();
      } else {
        return vm.text = '无法获取事故地点,请手动填写';
      }
    });
  };

  /*
  事故报警
   */
  $scope.fnAlarm = function() {
    return $ionicPopup.confirm({
      title: '是否确认?'
    }).then(function(flag) {
      var data;
      if (flag) {
        data = {
          location: vm.location,
          locLo: vm.locLo,
          locLa: vm.locLa,
          vehicleLic: vm.vehicleLic,
          accidentDesc: vm.accidentDesc,
          driverName: vm.account.realName
        };
        return Car.rescue(data).then(function() {
          return $ionicPopup.alert({
            title: '救援成功!'
          });
        }, function(msg) {
          return $ionicPopup.alert({
            title: msg
          });
        });
      }
    });
  };
}).controller('Driver.OrderCtrl', function($scope, $state, $stateParams, $ionicLoading, $localStorage, $ionicPopup, Order, KEY_ACCOUNT) {
  var vm;
  vm = $scope.vm = {
    id: $stateParams.id,
    list: [],
    order: {},
    account: $localStorage[KEY_ACCOUNT]
  };
  $scope.fnGetList = function() {
    $ionicLoading.show();
    return Order.list().then(function(res) {
      vm.list = res.rows;
      return $ionicLoading.hide();
    })["finally"](function() {
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
  };
  $scope.fnDetail = function(id) {
    $ionicLoading.show();
    return Order.detail(id).then(function(data) {
      vm.order = data;
      return $ionicLoading.hide();
    });
  };
  $scope.nameFilter = function(list) {
    var item, j, len, res;
    res = [];
    if (!angular.isArray(list)) {
      return [];
    }
    for (j = 0, len = list.length; j < len; j++) {
      item = list[j];
      if (item.driver === vm.account.realName) {
        res.push(item);
      }
    }
    return res;
  };

  /*
  开始发车
   */
  $scope.fnBegining = function(id) {
    return Order.begin(id).then(function() {
      return vm.order.status = 4;
    }, function(msg) {
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };

  /*
  完成任务
   */
  return $scope.fnFinish = function(id) {
    return $ionicPopup.confirm({
      title: '完成任务',
      template: '是否确认完成任务'
    }).then(function(res) {
      if (res) {
        return Order.finish(id).then(function() {
          return $state.go('mission');
        }, function(msg) {
          if (msg == null) {
            return;
          }
          return $ionicPopup.alert({
            title: msg
          });
        });
      }
    });
  };
}).controller('User.HomeCtrl', function($scope, $ionicPopup, $filter, $ionicLoading, $localStorage, $cordovaDatePicker, $cordovaGeolocation, $ionicHistory, $stateParams, Order, Map) {
  var validate, vm;
  vm = $scope.vm = {
    planStartTime: new Date(),
    planEndTime: new Date(),
    carList: $localStorage['selectedCar']
  };
  $scope.today = new Date();
  validate = function() {
    var msg;
    if (vm.vehicleCount == null) {
      msg = '用车数量为空';
    }
    if (vm.planEndTime == null) {
      msg = '用车结束时间未选择';
    }
    if (vm.planStartTime == null) {
      msg = '用车起始时间未选择';
    }
    if (vm.planStartPlace == null) {
      msg = '上车地点为空';
    }
    if (vm.planEndPlace == null) {
      msg = '目的地为空';
    }
    return $ionicPopup.alert({
      title: msg
    });
  };
  $scope.fnCreateOrder = function() {
    var data;
    if ((vm.planEndPlace != null) && (vm.planStartPlace != null) && (vm.planStartTime != null) && (vm.planEndTime != null)) {
      if (vm.planStartTime.valueOf() > vm.planEndTime.valueOf()) {
        $ionicPopup.alert({
          title: '开始时间不能大于结束时间'
        });
        return;
      }
      $ionicLoading.show();
      data = angular.extend(vm);
      if (vm.startLocLa != null) {
        data.startLocLa = String(vm.startLocLa);
      }
      if (vm.startLocLo) {
        data.startLocLo = String(vm.startLocLo);
      }
      if (vm.endLocLa) {
        data.endLocLa = String(vm.endLocLa);
      }
      if (vm.endLocLo) {
        data.endLocLo = String(vm.endLocLo);
      }
      if (vm.vehicleCount) {
        data.vehicleCount = String(vm.vehicleCount);
      }
      data.planStartTime = $filter('date')(vm.planStartTime, 'yyyy-MM-dd HH:mm:ss');
      data.planEndTime = $filter('date')(vm.planEndTime, 'yyyy-MM-dd HH:mm:ss');
      return Order.create(data).then(function() {
        $ionicLoading.hide();
        $ionicPopup.alert({
          title: '提交成功！'
        });
        return $scope.fnResetForm();
      }, function(msg) {
        if (msg == null) {
          return;
        }
        $ionicLoading.hide();
        return $ionicPopup.alert({
          title: msg
        });
      });
    } else {
      return validate();
    }
  };

  /*
  重置表单
   */
  $scope.fnResetForm = function() {
    delete $localStorage['selectedPeople'];
    delete $localStorage['selectedCar'];
    delete vm.passengers;
    delete vm.vehicleCount;
    delete vm.description;
    delete vm.planEndPlace;
    delete vm.endLocLa;
    return delete vm.endLocLo;
  };
  $scope.fnSearch = function() {
    var data;
    if (!vm.searchText) {
      return;
    }
    data = {
      q: vm.searchText
    };
    return Map.suggestion(data).then(function(res) {
      vm.poiResults = res;
      return vm.errorText = null;
    }, function(msg) {
      if (msg == null) {
        return;
      }
      return vm.errorText = msg;
    });
  };
  $scope.fnGetLocation = function() {
    var planEndPlace, planStartPlace;
    planStartPlace = $localStorage['planStartPlace'];
    planEndPlace = $localStorage['planEndPlace'];
    if (planStartPlace != null) {
      vm.planStartPlace = planStartPlace.address;
      vm.startLocLa = planStartPlace.lat;
      vm.startLocLo = planStartPlace.lng;
      delete $localStorage['planStartPlace'];
    }
    if (planEndPlace != null) {
      vm.planEndPlace = planEndPlace.address;
      vm.endLocLa = planEndPlace.lat;
      vm.endLocLo = planEndPlace.lng;
      return delete $localStorage['planEndPlace'];
    }
  };
  $scope.fnResetCarList = function() {
    delete $localStorage['selectedCar'];
    vm.carList = $localStorage['selectedCar'];
    if (angular.isArray(vm.carList)) {
      return vm.vehicleCount = vm.carList.length;
    }
  };
  $scope.fnGetSelectedPeople = function() {
    var list;
    list = $localStorage['selectedPeople'];
    if (angular.isArray(list) && list.length > 0) {
      return vm.passengers = list;
    } else {
      return vm.passengers = [];
    }
  };
  $scope.fnConfirm = function() {
    if (!vm.lat || !vm.lng) {
      return $ionicPopup.alert({
        title: '你还未选择地点'
      });
    } else {
      $localStorage[$stateParams.from] = vm;
      return $ionicHistory.goBack();
    }
  };
  $scope.fnConfirm2 = function(address) {
    vm.address = address;
    $localStorage[$stateParams.from] = vm;
    return $ionicHistory.goBack();
  };
  return $scope.$on('$ionicView.enter', function() {
    $scope.fnGetLocation();
    $scope.fnGetSelectedPeople();
    vm.carList = $localStorage['selectedCar'];
    if (angular.isArray(vm.carList)) {
      return vm.vehicleCount = vm.carList.length;
    }
  });
}).controller('User.CarCtrl', function($scope, Car, Account, $ionicPopup, $localStorage, $ionicLoading) {
  var vm;
  vm = $scope.vm = {
    list: [],
    pageStart: 1,
    pageCount: 50,
    search: '',
    hasMore: true,
    location: null,
    retryTime: 3
  };
  $scope.fnGetLocation = function() {
    if (!vm.location) {
      return Account.getLocation().then(function(res) {
        return vm.location = res;
      }, function(err) {
        if (vm.retryTime > 0) {
          vm.retryTime--;
          return $scope.fnGetLocation();
        }
      });
    }
  };
  $scope.fnGetDistance = function(location) {
    var distance;
    if ((vm.location != null) && (location != null)) {
      distance = Account.getDistance(vm.location.lat, vm.location.lng, parseInt(location.la), parseInt(location.lo));
      if (distance != null) {
        return distance + 'km';
      }
    }
  };
  $scope.fnGetList = function(concat) {
    var data;
    if (concat == null) {
      concat = false;
    }
    $ionicLoading.show();
    if (concat === false) {
      vm.pageStart = 1;
    }
    data = {
      pageCount: vm.pageCount,
      pageStart: concat === true ? ++vm.pageStart : vm.pageStart,
      matchLic: vm.search,
      matchNick: vm.search
    };
    return Car.list(data).then(function(res) {
      $ionicLoading.hide();
      if (concat === true) {
        vm.list = vm.list.concat(res.rows);
      } else {
        vm.list = res.rows;
      }
      if (res.total < vm.pageCount) {
        return vm.hasMore = false;
      } else {
        return vm.hasMore = true;
      }
    }, function(msg) {
      $ionicLoading.hide();
      vm.hasMore = false;
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    })["finally"](function() {
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
  };

  /*
  选择车辆
   */
  $scope.fnSelect = function(car) {
    var obj, ref;
    if (angular.isArray($localStorage['selectedCar'])) {
      if (obj = (ref = car.vehicleUid, indexOf.call($localStorage['selectedCar'], ref) >= 0)) {
        return $ionicPopup.alert({
          title: '该车辆已选'
        });
      } else {
        return $localStorage['selectedCar'].push(car.vehicleUid);
      }
    } else {
      return $localStorage['selectedCar'] = [car.vehicleUid];
    }
  };
  return $scope.fnIsChecked = function(id) {
    var obj;
    if ($localStorage['selectedCar'] != null) {
      return obj = indexOf.call($localStorage['selectedCar'], id) >= 0;
    }
  };
}).controller('User.PeopleCtrl', function($scope, $filter, $localStorage, $ionicLoading, $ionicPopup, $ionicModal, People, Account) {
  var vm;
  vm = $scope.vm = {
    list: [],
    tempList: $localStorage['peoples'],
    pageStart: 1,
    pageCount: 20,
    hasMore: true,
    search: ''
  };
  $scope.fnGetList = function(concat) {
    var data;
    if (concat == null) {
      concat = false;
    }
    $ionicLoading.show();
    if (concat === false) {
      vm.pageStart = 1;
    }
    data = {
      pageCount: vm.pageCount,
      pageStart: concat === true ? ++vm.pageStart : vm.pageStart,
      realName: vm.search
    };
    return Account.userList(data).then(function(res) {
      $ionicLoading.hide();
      if (concat === true) {
        vm.list = vm.list.concat(res.rows);
      } else {
        vm.list = res.rows;
      }
      if (res.total < vm.pageCount) {
        return vm.hasMore = false;
      } else {
        return vm.hasMore = true;
      }
    }, function(msg) {
      $ionicLoading.hide();
      vm.hasMore = false;
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    })["finally"](function() {
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
  };
  $ionicModal.fromTemplateUrl('people-modal.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function(modal) {
    return vm.modal = modal;
  });
  $scope.fnOpenModal = function() {
    return vm.modal.show();
  };
  $scope.fnCloseModal = function() {
    return vm.modal.hide();
  };
  $scope.fnDelete = function(item, index) {
    var confirmPopup;
    confirmPopup = $ionicPopup.confirm({
      title: "是否删除 " + item.realName + " 的信息?"
    });
    return confirmPopup.then(function(res) {
      if (res) {
        return vm.tempList.splice(index, 1);
      }
    });
  };
  $scope.fnAddPassenger = function(form) {
    $ionicLoading.show();
    if (!vm.tempList || !angular.isArray(vm.tempList)) {
      vm.tempList = $localStorage['peoples'] = [];
    }
    vm.tempList.push(angular.extend(form, {
      checked: true
    }));
    $ionicLoading.hide();
    vm.form = {};
    return $scope.fnCloseModal();
  };
  $scope.$watch('vm.list', function() {
    var arr1, arr2;
    arr1 = $filter('filter')(vm.list, {
      checked: true
    });
    arr2 = $filter('filter')(vm.tempList || [], {
      checked: true
    });
    $localStorage['selectedPeople'] = arr1.concat(arr2);
    return console.log($localStorage['selectedPeople']);
  }, true);
  return $scope.$watch('vm.tempList', function() {
    var arr1, arr2;
    arr1 = $filter('filter')(vm.list, {
      checked: true
    });
    arr2 = $filter('filter')(vm.tempList || [], {
      checked: true
    });
    $localStorage['selectedPeople'] = arr1.concat(arr2);
    return console.log($localStorage['selectedPeople']);
  }, true);
}).controller('User.OrderCtrl', function($scope, $ionicLoading, $ionicPopup, $ionicScrollDelegate, $localStorage, Order, KEY_ACCOUNT) {
  var getStatusArray, vm;
  vm = $scope.vm = {
    account: $localStorage[KEY_ACCOUNT],
    list: [],
    tabs: [
      {
        id: 1,
        name: '审批中'
      }, {
        id: 2,
        name: '已配车'
      }, {
        id: 3,
        name: '在途'
      }, {
        id: 4,
        name: '历史'
      }
    ],
    pageStart: 1,
    pageCount: 50,
    currentTab: 1,
    hasMore: true
  };
  getStatusArray = function() {
    var status;
    status = [];
    switch (vm.currentTab) {
      case 1:
        status.push(1);
        status.push(2);
        break;
      case 2:
        status.push(3);
        break;
      case 3:
        status.push(4);
        break;
      case 4:
        status.push(5);
    }
    return status.join(',');
  };
  $scope.fnChangeTab = function(id) {
    vm.currentTab = id;
    $ionicScrollDelegate.scrollTop();
    return $scope.fnGetList();
  };
  $scope.fnIsLeader = function() {
    var role;
    return role = indexOf.call(vm.account.roles, 'leader') >= 0;
  };
  $scope.fnGetList = function(concat) {
    var data;
    if (concat == null) {
      concat = false;
    }
    $ionicLoading.show();
    if (concat === false) {
      vm.pageStart = 1;
    }
    data = {
      status: getStatusArray(),
      pageStart: vm.pageStart,
      pageCount: vm.pageCount
    };
    return Order.list(data).then(function(res) {
      $ionicLoading.hide();
      if (concat === true) {
        vm.list = vm.list.concat(res.rows);
      } else {
        vm.list = res.rows;
      }
      if (res.total < vm.pageCount) {
        return vm.hasMore = false;
      } else {
        return vm.hasMore = true;
      }
    }, function(msg) {
      $ionicLoading.hide();
      vm.hasMore = false;
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    })["finally"](function() {
      $scope.$broadcast('scroll.refreshComplete');
      return $scope.$broadcast('scroll.infiniteScrollComplete');
    });
  };
  return $scope.fnAgree = function(item, event) {
    Order.approve(item.serialNum, '同意用车').then(function() {
      return $scope.fnGetList();
    }, function(msg) {
      return $ionicPopup.alert({
        title: msg
      });
    });
    return event.stopPropagation();
  };
}).controller('User.OrderDetailCtrl', function($scope, $stateParams, $ionicLoading, $ionicPopup, $localStorage, $ionicHistory, $ionicModal, Order, KEY_ACCOUNT) {
  var vm;
  vm = $scope.vm = {
    id: $stateParams.id,
    order: {},
    account: $localStorage[KEY_ACCOUNT]
  };
  $ionicModal.fromTemplateUrl('feedback-modal.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function(modal) {
    return vm.modal = modal;
  });
  $scope.fnIsLeader = function() {
    var role;
    return role = indexOf.call(vm.account.roles, 'leader') >= 0;
  };
  $scope.fnDetail = function() {
    $ionicLoading.show();
    return Order.detail(vm.id).then(function(data) {
      vm.order = data;
      return $ionicLoading.hide();
    });
  };
  $scope.fnFeedback = function(content) {
    if (content.trim()) {
      $ionicLoading.show();
      return Order.feedback(vm.id, {
        content: content
      }).then(function() {
        $ionicLoading.hide();
        $scope.fnCloseModal();
        return vm.order.isFeedback = 1;
      });
    }
  };
  $scope.fnOpenPopup = function(type) {
    if (type === 'approve') {
      vm.comment = '同意用车';
    } else {
      vm.comment = '拒绝用车';
    }
    return $ionicPopup.show({
      template: '<input autofocus type="test" ng-model="vm.comment">',
      title: '审批意见',
      scope: $scope,
      buttons: [
        {
          text: '确定',
          type: 'button-positive',
          onTap: function() {
            return [type, vm.comment];
          }
        }, {
          text: '取消'
        }
      ]
    }).then(function(arg) {
      var comment, ref, type;
      ref = arg != null ? arg : [], type = ref[0], comment = ref[1];
      if (type === 'approve') {
        return Order.approve(vm.id, comment).then(function() {
          return $scope.fnDetail();
        }, function(msg) {
          if (msg == null) {
            return;
          }
          return $ionicPopup.alert({
            title: msg
          });
        });
      } else if (type === 'reject') {
        return Order.reject(vm.id, comment).then(function() {
          return $scope.fnDetail();
        }, function(msg) {
          if (msg == null) {
            return;
          }
          return $ionicPopup.alert({
            title: msg
          });
        });
      }
    });
  };
  $scope.fnApprove = function() {
    $ionicLoading.show();
    return Order.approve(vm.id, vm.comment).then(function() {
      $ionicLoading.hide();
      return $ionicHistory.goBack(-1);
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnReject = function() {
    $ionicLoading.show();
    return Order.reject(vm.id, vm.comment).then(function() {
      $ionicLoading.hide();
      return $ionicHistory.goBack(-1);
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnOpenModal = function() {
    return vm.modal.show();
  };
  $scope.fnCloseModal = function() {
    return vm.modal.hide();
  };
  return $scope.$on('$destroy', function() {
    return vm.modal.remove();
  });
}).controller('ReportCtrl', function($scope, $state, $stateParams, $localStorage, $ionicPopup, $ionicLoading, $filter, Statistic, KEY_ACCOUNT) {
  var myChart, vm;
  vm = $scope.vm = {
    user: $localStorage[KEY_ACCOUNT],
    date: new Date(),
    labels: {
      'c001': '  行驶里程（公里）',
      'c002': '总油耗（升）',
      'c004': '\t\t\t\t\t\t\t\t\t\t平均油耗（升/百公里）',
      'c003': '总油费（元）',
      'c005': '  用车时间（小时）',
      'c006': '车机拆除（次）',
      'c007': '怠速超长（次）',
      'c008': '越界（次）',
      'c009': '非调度用车（次）',
      'c010': '车辆违章（次）',
      'c011': '车辆超速（次）'
    },
    type: $stateParams.type
  };
  $scope.today = new Date();
  if (document.getElementById('main') != null) {
    myChart = echarts.init(document.getElementById('main'));
  }
  $scope.fnRefreshChart = function(list, type) {
    var dates, j, num, option, values;
    if (type == null) {
      type = "bar";
    }
    myChart.clear();
    values = [];
    dates = [];
    for (num = j = 1; j <= 31; num = ++j) {
      dates.push(num);
      if ((list[num - 1] != null) && num === parseInt(list[num - 1]['CREATE_DATE'].substr(8))) {
        if (vm.type === 'c005') {
          values.push(list[num - 1]['Y1'] / 60);
        } else {
          values.push(list[num - 1]['Y1']);
        }
      } else {
        values.push(0);
      }
    }
    option = {
      tooltip: {
        show: false,
        trigger: 'axis'
      },
      toolbox: {
        show: true,
        y: 'top',
        itemSize: 26,
        feature: {
          magicType: {
            show: true,
            type: ['line', 'bar']
          }
        }
      },
      grid: {
        x: 50,
        x2: 50,
        y: 40
      },
      xAxis: {
        name: '日期(日)',
        data: dates,
        axisLabel: {
          interval: function(index, val) {
            return (index + 1) % 3 === 0;
          }
        }
      },
      yAxis: {
        name: vm.labels[vm.type],
        type: 'value'
      },
      series: [
        {
          type: type,
          data: values
        }
      ]
    };
    return myChart.setOption(option);
  };
  $scope.fnLoadData = function() {
    var data, endTime, startTime;
    console.log('load data');
    $ionicLoading.show();
    startTime = angular.copy(vm.date);
    startTime.setDate(1);
    endTime = angular.copy(vm.date);
    endTime.setMonth(endTime.getMonth() + 1);
    endTime.setDate(1);
    endTime.setDate(-1);
    data = {
      startDate: $filter('date')(startTime, 'yyyyMMdd'),
      endDate: $filter('date')(endTime, 'yyyyMMdd'),
      unitId: vm.user.dept.deptUid,
      code: $stateParams.type
    };
    return Statistic.fuel(data).then(function(res) {
      $ionicLoading.hide();
      $scope.fnRefreshChart(res.rows);
      return console.log(res);
    }, function(msg) {
      $ionicLoading.hide();
      if (msg == null) {
        return;
      }
      return $ionicPopup.alert({
        title: msg
      });
    });
  };
  $scope.fnChangeDate = function(flag) {
    var duration;
    duration = 24 * 60 * 60 * 1000;
    if (flag > 0 && vm.date.valueOf() > (new Date()).valueOf() - duration) {
      return;
    }
    vm.date.setMonth(vm.date.getMonth() + flag);
    return vm.dateInstance.setVal(vm.date);
  };
  return $scope.$watch('vm.date', function(val) {
    if ($state.is('reportDtail')) {
      return $scope.fnLoadData();
    }
  }, true);
});
